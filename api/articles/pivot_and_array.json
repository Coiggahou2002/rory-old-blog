{"title":"归纳总结 | 指针","uid":"65abd3d32b27895ac3ec803fdc1b4589","slug":"pivot_and_array","date":"2020-10-30T16:00:00.000Z","updated":"2020-12-08T10:23:41.000Z","comments":true,"path":"api/articles/pivot_and_array.json","keywords":null,"cover":null,"content":"<p>本文介绍 C 语言中的指针和数组相关知识。</p>\n<span id=\"more\"></span>\n<h1 id=\"基础知识\"><a class=\"markdownIt-Anchor\" href=\"#基础知识\"></a> 基础知识</h1>\n<h3 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\"></a> 变量</h3>\n<p>一个变量具有三项属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>数据类型 (Element Type)</strong></td>\n<td>如 <code>int</code> ，<code>char</code></td>\n</tr>\n<tr>\n<td><strong>地址 (Memory Address)</strong></td>\n<td>对于64位计算机来讲，一条内存地址值占8个字节</td>\n</tr>\n<tr>\n<td><strong>值 (Value)</strong></td>\n<td>变量的“内容”</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\"></a> 运算符</h3>\n<p><code>&amp;</code>：取地址运算符，可根据值来取地址，在一个<strong>值</strong>前面加上该操作符，就可以得到其对应的地址<br />\n<code>*</code>：取值运算符，可根据地址来取值，在一个<strong>地址</strong>前面加上该操作符，就可以得到地址中存储的值</p>\n<h3 id=\"指针-pivot\"><a class=\"markdownIt-Anchor\" href=\"#指针-pivot\"></a> 指针 (Pivot)</h3>\n<p>指针的全名，叫作<strong>指针变量</strong>，既然指针是变量，也就意味着指针具备上述三种属性（类型，地址，值）</p>\n<h4 id=\"类型\"><a class=\"markdownIt-Anchor\" href=\"#类型\"></a> 类型</h4>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pInt<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//定义一个用于指向整型变量的指针pInt</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pChar<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//定义一个用于指向字符型变量的指针pInt</span>\n<span class=\"token keyword\">double</span><span class=\"token operator\">*</span> pDble<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//定义一个用于指向双精度型变量的指针pInt</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>注意，<code>int*p</code>，<code>int* p</code>，<code>int *p</code>，<code>int * p</code> 是一个意思，但我个人倾向于写成 <code>int* p</code> 的形式，因为这样的定义反映了它的内涵和功能——定义一个<strong>用来指向整型变量</strong>的指针变量p</p>\n<h4 id=\"地址和值\"><a class=\"markdownIt-Anchor\" href=\"#地址和值\"></a> 地址和值</h4>\n<p>指针既然是变量，那么它就一定有地址，也有值，指针变量毕竟是个变量，也需要安身之处，所以它有自己的地址，但它特殊就特殊在，它的值也是一个地址，并且它可以访问这个地址所存储的值。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>社区人口普查员可以根据手上的登记簿，到自己社区内的人家里去查户口，同时人口普查员自己也住着出租屋，这里的人口普查员就是指针，出租屋就是指针的地址，登记簿就是指针的值，查户口就是根据自己的值（别人的地址）来访问别人地址存储的值。</p></blockquote>\n<p>我们可以运行以下代码测试一下</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//3           变量a的值</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//6422044     变量a的地址</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//6422044     指针变量p的值</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//6422032     指针变量p自己的地址</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//3           指针变量p根据自己的值去访问a，得到a的值</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//6422044     先取到a的值，再根据a的值取地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>综上所述，指针的本质是——<strong>具有访问功能的变量</strong></p>\n<h3 id=\"指针的基本应用\"><a class=\"markdownIt-Anchor\" href=\"#指针的基本应用\"></a> 指针的基本应用</h3>\n<h4 id=\"1-修改实参的值\"><a class=\"markdownIt-Anchor\" href=\"#1-修改实参的值\"></a> 1. 修改实参的值</h4>\n<p>我们都知道，当我们向函数传递普通变量参数（非数组）时，在函数中操作的实际上是实参的副本——也叫形参，也就是说，在函数中对参数作的改动，都是对形参的改动，不会作用到实参身上。<br />\n当我们需要对在函数内部对实参作出改动时，就需要用到指针。</p>\n<p>例如常用的交换函数</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">Swap</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们传进去的参数是两个<strong>地址值</strong>，需要注意的是，这与上文所说的并不冲突，传入的地址也被拷贝成副本作为形参，但是这并不影响我们的操作，因为我们不需要修改这两条地址，我们想要修改的，是这两条地址存储的值。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不妨把函数想象成一间只有窗口的小黑屋，里面住着一个刺客，有两个人走到窗口，A向里面喊，我家在北京路1号，B向里面喊，我家在北京路2号，这样一来，黑屋里的刺客会拿小本本记下A、B的地址，然后第二天夜里分别前往A、B的家中，月黑风高处，杀人好时机。这里的刺客就是函数的内容，A、B向屋里喊地址的过程就是“传递参数”，黑屋刺客小本本上的地址就是参数的副本（形参），刺客潜入他俩家中执行暗杀任务，就是根据地址值访问并修改地址存储的值。</p></blockquote>\n<h4 id=\"2作多返回值函数的出口参数\"><a class=\"markdownIt-Anchor\" href=\"#2作多返回值函数的出口参数\"></a> 2.作多返回值函数的出口参数</h4>\n<p>当函数需要多个返回值时，只能返回一个值的 <code>return</code> 功能就不够用了，我们可以多设置几个参数，用于接收函数的处理结果，这样的参数叫做函数的“出口参数”，一般来讲，出口参数需要能够修改到实参的值，所以需要一般使用指针变量作出口参数。</p>\n<p>举个例子。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">GetMaxScore</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> score<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pMaxScore<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pMaxNumber<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/*Function：获取学生列表中的最高分，并返回最高分学生的学号*/</span>\n    <span class=\"token keyword\">int</span> max_num<span class=\"token punctuation\">,</span> max_score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            max_num <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            max_score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/*函数结束，将结果赋给出口参数，修改实参的值*/</span>\n    <span class=\"token operator\">*</span>pMaxScore <span class=\"token operator\">=</span> max_score<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>pMaxNumber <span class=\"token operator\">=</span> max_num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"指针和数组\"><a class=\"markdownIt-Anchor\" href=\"#指针和数组\"></a> 指针和数组</h1>\n<h3 id=\"数组的底层知识\"><a class=\"markdownIt-Anchor\" href=\"#数组的底层知识\"></a> 数组的底层知识</h3>\n<p><strong>1. 数组是一片连续的内存空间，且每个单位内存空间的大小是确定的</strong></p>\n<p>例如，定义一个长度为5的整型数组 <code>int a[5]</code> ，由于 <code>int</code> 型数据占4个字节，系统就会开辟一块连续的、占20个字节的内存空间，用于存放数组 <code>a</code></p>\n<p><strong>2. 数组可以通过下标随机访问</strong></p>\n<p>与线性表不同，数组可以通过下标值在 <code>O(1)</code> 时间内访问到任何数组内部元素的值，这依赖于数组的内存空间是<strong>连续</strong>且<strong>等大</strong>的，这样一来，只要提供数组的首地址和下标值，就可以通过下面的计算，得到数组任意下标位置的地址值，从而在 <code>O(1)</code> 时间内访问到该元素</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//arr是数组名，代表数组的首地址</span>\n<span class=\"token comment\">//此处的等号不是赋值运算，只为说明计算地址的方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>3. 二维数组的本质</strong></p>\n<p>二维数组虽然在逻辑上类似于一个矩阵，但在物理上，它仍然是一个一维数组，也就是由若干个<strong>等大单位内存空间</strong>组成的一片连续内存空间。<br />\n我们不妨把二维数组的每一行看成一个整体（一个一维数组），那么二维数组实际上也是一个一维数组，只不过这个一维数组的每个元素还是一维数组。</p>\n<p>但话又说回来，一维数组要怎么“塞进去”呢？</p>\n<p>实际上，二维数组的每个元素值，实际上是<strong>对应子数组的地址值</strong>。</p>\n<p>换句话说，系统开辟了另外的空间来存放子数组的具体值，而这个二维数组相当于是子数组的<strong>索引数组</strong>。</p>\n<p><strong>现在我们来讨论，为什么在声明二维数组时，第二维的长度不能省略？</strong></p>\n<p>有了以上知识的铺垫，这个问题就转换成了一个等价子问题：</p>\n<p>为什么在声明一维数组时，数组的长度不能省略？</p>\n<p>答案应该是显然的——否则系统根本不知道应该开辟多长一片连续内存空间来存放这个一维数组。</p>\n<h3 id=\"数组名-指针\"><a class=\"markdownIt-Anchor\" href=\"#数组名-指针\"></a> 数组名 = 指针？</h3>\n<h1 id=\"指针和结构体\"><a class=\"markdownIt-Anchor\" href=\"#指针和结构体\"></a> 指针和结构体</h1>\n","text":"本文介绍 C 语言中的指针和数组相关知识。 基础知识 变量 一个变量具有三项属性： 属性 解释 数据类型 (Element Type) 如 int ，char 地址 (Memory Address) 对于64位计算机来讲，一条内存地址值占8个字节 值 (Value) 变量的“内容...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"C/C++","slug":"C-C","count":2,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":2,"path":"api/tags/C-C.json"},{"name":"指针","slug":"指针","count":1,"path":"api/tags/指针.json"},{"name":"笔记总结","slug":"笔记总结","count":1,"path":"api/tags/笔记总结.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\"> 基础知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\"> 变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\"> 运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88-pivot\"><span class=\"toc-text\"> 指针 (Pivot)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\"> 类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%B0%E5%9D%80%E5%92%8C%E5%80%BC\"><span class=\"toc-text\"> 地址和值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8\"><span class=\"toc-text\"> 指针的基本应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BF%AE%E6%94%B9%E5%AE%9E%E5%8F%82%E7%9A%84%E5%80%BC\"><span class=\"toc-text\"> 1. 修改实参的值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E4%BD%9C%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%E7%9A%84%E5%87%BA%E5%8F%A3%E5%8F%82%E6%95%B0\"><span class=\"toc-text\"> 2.作多返回值函数的出口参数</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%84\"><span class=\"toc-text\"> 指针和数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E5%BA%95%E5%B1%82%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\"> 数组的底层知识</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%90%8D-%E6%8C%87%E9%92%88\"><span class=\"toc-text\"> 数组名 &#x3D; 指针？</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\"> 指针和结构体</span></a></li></ol>","author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LC 125 验证回文串","uid":"1905b17da4d915d445f9b18f99561b69","slug":"is_palindrome","date":"2020-10-31T16:00:00.000Z","updated":"2020-12-08T10:28:57.000Z","comments":true,"path":"api/articles/is_palindrome.json","keywords":null,"cover":"/img/leetcode.png","text":" 题目 给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 说明：本题中，我们将空字符串定义为有效的回文串。 示例 1: 输入: \"A man, a plan, a canal: Panama\" 输出: true 示例 2: 输入: \"race a ...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"题解","slug":"题解","count":16,"path":"api/tags/题解.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Hexo + Gitee 部署个人博客","uid":"f4e7ecf8b446abc26f94ba3ad7edad20","slug":"hexo_plus_gitee","date":"2020-10-27T02:53:36.000Z","updated":"2021-03-25T13:08:18.000Z","comments":true,"path":"api/articles/hexo_plus_gitee.json","keywords":null,"cover":"/img/hexo_plus_gitee/hexo_plus_gitee.png","text":"最近在尝试搭建个人博客，本来刚安装好WordPress，突然觉得这种动态的CMS有点过于臃肿，用来作个人博客的管理平台有点杀鸡用牛刀的意思. 后来在B站看了CodeSheep的介绍视频，决定尝试VuePress，但搭建好后又发现过于“静态”，缺少给文章打tag , categor...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"MIT 6.S081 Lab Util","uid":"7702ed0cfb3e150d7bb641d82353e817","slug":"MIT_6.S081_Lab_Util","date":"2022-08-04T14:33:00.000Z","updated":"2022-08-04T14:59:26.941Z","comments":true,"path":"api/articles/MIT_6.S081_Lab_Util.json","keywords":null,"cover":null,"content":"<p>以此文记录一下做 MIT 6.S081 操作系统实验的过程</p>\n<p>本文记录第一个实验——<a href=\"https://pdos.csail.mit.edu/6.828/2021/labs/util.html\">Lab Util</a></p>\n<p>这个实验有几个部分：</p>\n<ul>\n<li>Boot xv6</li>\n<li>教你怎么使用打分程序</li>\n<li>sleep</li>\n<li>pingpong</li>\n<li>primes</li>\n<li>find</li>\n<li>xargs</li>\n</ul>\n<h2 id=\"boot-xv6\"><a class=\"markdownIt-Anchor\" href=\"#boot-xv6\"></a> Boot xv6</h2>\n<p>这部分没什么好说的，我是在 WSL Ubuntu 20.04 下按照指示在安装好环境之后，跟着手册走，将系统跑起来就可以了</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> qemu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"如何使用打分程序\"><a class=\"markdownIt-Anchor\" href=\"#如何使用打分程序\"></a> 如何使用打分程序</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> grade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"资源\"><a class=\"markdownIt-Anchor\" href=\"#资源\"></a> 资源</h2>\n<p>xv 6 中文手册：<a href=\"https://th0ar.gitbooks.io/xv6-chinese/content/content/chapter0.html\">https://th0ar.gitbooks.io/xv6-chinese/content/content/chapter0.html</a></p>\n<h2 id=\"t1-调用-sleep\"><a class=\"markdownIt-Anchor\" href=\"#t1-调用-sleep\"></a> T1. 调用 sleep</h2>\n<p><code>user/user.h</code> 列出了我们可以使用的系统调用/库函数</p>\n<p>这个题只需要获取一下命令行参数 <code>argv[1]</code>，用 <code>atoi()</code> 转成数字，然后传进 <code>sleep(int)</code> 系统调用，就完成要求了</p>\n<h2 id=\"t2-实现-pingpong\"><a class=\"markdownIt-Anchor\" href=\"#t2-实现-pingpong\"></a> T2. 实现 pingpong</h2>\n<p>这个题是要求我们使用 pipe 来进行进程间通信</p>\n<p>要做这个题首先要搞清楚 <code>pipe</code> 和 <code>fork()</code> 在干什么</p>\n<h3 id=\"pipe\"><a class=\"markdownIt-Anchor\" href=\"#pipe\"></a> pipe</h3>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>pipe()</code> 函数创建一条单向管道（一端读，一端写），两端分别是不同的文件描述符 fd，创建成功后，把 read 端的文件描述符放到 <code>p[0]</code>，把 write 端的文件描述符放到 <code>p[1]</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> wr <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> rd <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在后续需要的时候，我们就可以进行读写</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>rd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">write</span><span class=\"token punctuation\">(</span>wr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"fork\"><a class=\"markdownIt-Anchor\" href=\"#fork\"></a> fork</h3>\n<p><code>fork()</code> 函数会创建一个子进程（该子进程拥有父进程多数信息的副本，例如相同的 PC、寄存器、以及打开的文件），创建成功后，父进程与子进程并行运行 (concurrently)，而且都从 <code>fork()</code> 的下一条语句开始</p>\n<p>这个函数不接收参数，返回一个整数：</p>\n<ul>\n<li>负数，说明 fork 失败</li>\n<li>0，fork 成功后，返回给子进程</li>\n<li>正数，fork 成功后，返回给父进程</li>\n</ul>\n<p>基于这个返回值，我们可以在主程序中通过简单的 if-else 来让 fork 后的父子进程执行不同的行为</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> child_pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child_pid <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// fork failed</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// after forked succesfully,</span>\n<span class=\"token comment\">// both parent and child process starts from here</span>\n<span class=\"token comment\">// with different returned values</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child_pid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// parent process behavior</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// child process behavior</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>参考：<a href=\"https://www.geeksforgeeks.org/c-program-demonstrate-fork-and-pipe/\">fork() 和  pipe() 一起使用的范例</a></p>\n<p>搞清楚 fork 和 pipe 怎么工作后，我们知道，由于 <code>fork()</code> 产生的子进程和父进程共享打开的文件，所以我们需要先创建管道，再 <code>fork()</code> ，这样父子进程就都能够访问管道了</p>\n<p>然后再在 if-else 中的父、子进程逻辑块分别写上对应的行为即可</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"kernel/types.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"kernel/stat.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"user/user.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> cpid<span class=\"token punctuation\">;</span>\n\n    cpid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cpid <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fork error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">char</span> byte_buf <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cpid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// father behavior</span>\n        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>byte_buf<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d: received pong\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// child behavior</span>\n        <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d: received ping\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>byte_buf<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"t3-primes\"><a class=\"markdownIt-Anchor\" href=\"#t3-primes\"></a> T3. primes</h2>\n<h2 id=\"t4-实现-find\"><a class=\"markdownIt-Anchor\" href=\"#t4-实现-find\"></a> T4. 实现 find</h2>\n<h2 id=\"t5-实现-xargs\"><a class=\"markdownIt-Anchor\" href=\"#t5-实现-xargs\"></a> T5. 实现 xargs</h2>\n","text":"以此文记录一下做 MIT 6.S081 操作系统实验的过程 本文记录第一个实验——Lab Util 这个实验有几个部分： Boot xv6 教你怎么使用打分程序 sleep pingpong primes find xargs Boot xv6 这部分没什么好说的，我是在 WSL...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":1,"path":"api/categories/操作系统.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":1,"path":"api/tags/操作系统.json"},{"name":"Lab","slug":"Lab","count":1,"path":"api/tags/Lab.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#boot-xv6\"><span class=\"toc-text\"> Boot xv6</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%89%93%E5%88%86%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\"> 如何使用打分程序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%BA%90\"><span class=\"toc-text\"> 资源</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#t1-%E8%B0%83%E7%94%A8-sleep\"><span class=\"toc-text\"> T1. 调用 sleep</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#t2-%E5%AE%9E%E7%8E%B0-pingpong\"><span class=\"toc-text\"> T2. 实现 pingpong</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pipe\"><span class=\"toc-text\"> pipe</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fork\"><span class=\"toc-text\"> fork</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#t3-primes\"><span class=\"toc-text\"> T3. primes</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#t4-%E5%AE%9E%E7%8E%B0-find\"><span class=\"toc-text\"> T4. 实现 find</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#t5-%E5%AE%9E%E7%8E%B0-xargs\"><span class=\"toc-text\"> T5. 实现 xargs</span></a></li></ol>","author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"数据结构实现 | ArrayList","uid":"015686a9342f613e50a022726c366bc4","slug":"arraylist_implement","date":"2022-08-10T18:56:00.000Z","updated":"2022-08-10T18:57:09.716Z","comments":true,"path":"api/articles/arraylist_implement.json","keywords":null,"cover":null,"text":" 代码实现 import java.util.Arrays; /** * 自扩容变长数组 (线程不安全) * @author Coiggahou2002 */ public class JArrayList&lt;T extends Object> &#123; /** * 暴露...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":6,"path":"api/tags/数据结构.json"},{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"},{"name":"造轮子","slug":"造轮子","count":1,"path":"api/tags/造轮子.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"暑假打卡日记","uid":"10b665f1e095b4ed3cf881e243904938","slug":"summer_go_up","date":"2022-08-01T15:39:00.000Z","updated":"2022-08-10T00:10:48.134Z","comments":true,"path":"api/articles/summer_go_up.json","keywords":null,"cover":null,"text":" 暑假打卡 08/09 力扣每日一题（1413. 逐步求和得到正数的最小值，数组遍历） 游泳 08/08 肩颈肌肉保养 回家 K3 核心训练 08/07 K2 胸肌训练 收拾行李 08/06 力扣每日一题（1408. 数组中的字符串匹配，简单暴力对比） 08/05 力扣每日一题（...","link":"","photos":[],"count_time":{"symbolsCount":930,"symbolsTime":"1 mins."},"categories":[{"name":"成长","slug":"成长","count":1,"path":"api/categories/成长.json"}],"tags":[{"name":"健身","slug":"健身","count":1,"path":"api/tags/健身.json"},{"name":"力扣","slug":"力扣","count":1,"path":"api/tags/力扣.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
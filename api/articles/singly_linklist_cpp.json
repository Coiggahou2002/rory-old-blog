{"title":"数据结构实现 | 单链表","uid":"5eff4f497e442b4699b87d24ee757803","slug":"singly_linklist_cpp","date":"2021-03-20T14:25:00.000Z","updated":"2021-03-26T14:34:12.000Z","comments":true,"path":"api/articles/singly_linklist_cpp.json","keywords":null,"cover":"/img/data_structure.png","content":"<p>本文给出用C语言实现单链表的代码。</p>\n<span id=\"more\"></span>\n<h1 id=\"基本结构带头节点\"><a class=\"markdownIt-Anchor\" href=\"#基本结构带头节点\"></a> 基本结构（带头节点）</h1>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span> LNode<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span><span class=\"token operator\">*</span> LinkList<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"操作实现\"><a class=\"markdownIt-Anchor\" href=\"#操作实现\"></a> 操作实现</h1>\n<h2 id=\"初始化链表\"><a class=\"markdownIt-Anchor\" href=\"#初始化链表\"></a> 初始化链表</h2>\n<p><img src=\"/cjpark/img/singly_linklist_cpp/initialize.png\" alt=\"\" /></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//Initialize the list and return a pointer to the head_node of the list</span>\nLinkList <span class=\"token function\">init_linklist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    LNode<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"顺序打印链表\"><a class=\"markdownIt-Anchor\" href=\"#顺序打印链表\"></a> 顺序打印链表</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//Print the list from head to tail</span>\n<span class=\"token comment\">//Time Complexity: O(n)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print_list</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NULLPTR_ERROR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EMPTY_LIST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"头插节点\"><a class=\"markdownIt-Anchor\" href=\"#头插节点\"></a> 头插节点</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//Insert a node at the front of the list</span>\n<span class=\"token comment\">//Time Complexity: O(1)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">add_front</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    LNode<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    L<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"按序号查找节点\"><a class=\"markdownIt-Anchor\" href=\"#按序号查找节点\"></a> 按序号查找节点</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//Find the val of a node with certain number, if it exists.</span>\n<span class=\"token comment\">//The number given should starts from 1</span>\n<span class=\"token comment\">//Time Complexity: O(n)</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">get_val_by_num</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> L<span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> res <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        cnt <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token operator\">*</span>res <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"按值查找节点\"><a class=\"markdownIt-Anchor\" href=\"#按值查找节点\"></a> 按值查找节点</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//Return the first node whose data equals val, or return NULL</span>\n<span class=\"token comment\">//Time Complexity: O(n)</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">get_by_val</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NULLPTR_ERROR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EMPTY_LIST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>data <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"在给定节点之后插入新节点\"><a class=\"markdownIt-Anchor\" href=\"#在给定节点之后插入新节点\"></a> 在给定节点之后插入新节点</h2>\n<p><img src=\"/cjpark/img/singly_linklist_cpp/insert_after.png\" alt=\"\" /></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//Insert a new node with certain val after the given node p</span>\n<span class=\"token comment\">//Then return a pointer pointed to the new node</span>\n<span class=\"token comment\">//Time Complexity: O(1)</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    t<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"在给定节点之前插入新节点\"><a class=\"markdownIt-Anchor\" href=\"#在给定节点之前插入新节点\"></a> 在给定节点之前插入新节点</h2>\n<p><img src=\"/cjpark/img/singly_linklist_cpp/insert_before.png\" alt=\"\" /></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//Insert a new node with certain val before the given node p</span>\n<span class=\"token comment\">//Then return a pointer pointed to the new node</span>\n<span class=\"token comment\">//Time Complexity: O(1)</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">insert_before</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> t <span class=\"token operator\">=</span> <span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> t<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"删除给定节点\"><a class=\"markdownIt-Anchor\" href=\"#删除给定节点\"></a> 删除给定节点</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//Delete the given node in the list, if it does exist</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">delete_node</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">,</span> LNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> L<span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//This indicates that p is not the last node</span>\n    <span class=\"token comment\">//We can swap the data of p and the node t after it, then delete t</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        LNode<span class=\"token operator\">*</span> t <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> t<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//This indicates that p is the last node</span>\n        <span class=\"token comment\">//We need to iterate the list to find the prior node of p</span>\n        LNode<span class=\"token operator\">*</span> pr <span class=\"token operator\">=</span> L<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> found <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>found<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pr<span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                pr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                found <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            pr <span class=\"token operator\">=</span> pr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> found<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"获取链表长度\"><a class=\"markdownIt-Anchor\" href=\"#获取链表长度\"></a> 获取链表长度</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//Return the length of the list</span>\n<span class=\"token comment\">//If the list only has the head-node, its length gonna be 0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_length</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> L<span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> L<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        cnt <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"参考测试代码\"><a class=\"markdownIt-Anchor\" href=\"#参考测试代码\"></a> 参考测试代码</h1>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/*---TESTING_CODE---*/</span>\n\n    LinkList lst <span class=\"token operator\">=</span> <span class=\"token function\">init_linklist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">add_front</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">add_front</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">add_front</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print_list</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    LNode<span class=\"token operator\">*</span> t1 <span class=\"token operator\">=</span> <span class=\"token function\">get_by_val</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>t1<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1_NULL\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    LNode<span class=\"token operator\">*</span> t2 <span class=\"token operator\">=</span> <span class=\"token function\">get_by_val</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t2 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>t2<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2_NULL\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> res1<span class=\"token punctuation\">,</span> res2<span class=\"token punctuation\">,</span> res3<span class=\"token punctuation\">,</span> res4<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">get_val_by_num</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>res1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">get_val_by_num</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>res2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">get_val_by_num</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>res3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">get_val_by_num</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>res4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> res1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> res2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> res3 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> res4 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    LNode<span class=\"token operator\">*</span> tar <span class=\"token operator\">=</span> <span class=\"token function\">get_by_val</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>tar<span class=\"token punctuation\">,</span> <span class=\"token number\">999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">insert_before</span><span class=\"token punctuation\">(</span>tar<span class=\"token punctuation\">,</span> <span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print_list</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    LNode<span class=\"token operator\">*</span> toDel <span class=\"token operator\">=</span> <span class=\"token function\">get_by_val</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> <span class=\"token number\">999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">delete_node</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> toDel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print_list</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">get_length</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    LinkList emptylst <span class=\"token operator\">=</span> <span class=\"token function\">init_linklist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">add_front</span><span class=\"token punctuation\">(</span>emptylst<span class=\"token punctuation\">,</span> <span class=\"token number\">789</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">print_list</span><span class=\"token punctuation\">(</span>emptylst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">get_length</span><span class=\"token punctuation\">(</span>emptylst<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/*---END---*/</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"本文给出用C语言实现单链表的代码。 基本结构（带头节点） struct LNode &#123; int data; LNode* next; &#125;; typedef struct LNode LNode; typedef struct LNode* LinkList; ...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":5,"path":"api/tags/数据结构.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%B8%A6%E5%A4%B4%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 基本结构（带头节点）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\"> 操作实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\"> 初始化链表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%BA%E5%BA%8F%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\"> 顺序打印链表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%B4%E6%8F%92%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 头插节点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%89%E5%BA%8F%E5%8F%B7%E6%9F%A5%E6%89%BE%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 按序号查找节点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%89%E5%80%BC%E6%9F%A5%E6%89%BE%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 按值查找节点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E7%BB%99%E5%AE%9A%E8%8A%82%E7%82%B9%E4%B9%8B%E5%90%8E%E6%8F%92%E5%85%A5%E6%96%B0%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 在给定节点之后插入新节点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E7%BB%99%E5%AE%9A%E8%8A%82%E7%82%B9%E4%B9%8B%E5%89%8D%E6%8F%92%E5%85%A5%E6%96%B0%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 在给定节点之前插入新节点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E7%BB%99%E5%AE%9A%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 删除给定节点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E9%93%BE%E8%A1%A8%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\"> 获取链表长度</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\"> 参考测试代码</span></a></li></ol>","author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"数据结构实现 | 双链表","uid":"787a127d9d6b0544e7ad2720504e8ca8","slug":"doubly_linklist_cpp","date":"2021-03-26T13:35:00.000Z","updated":"2021-03-31T13:04:15.000Z","comments":true,"path":"api/articles/doubly_linklist_cpp.json","keywords":null,"cover":"/img/data_structure.png","text":"本文给出用C语言实现双链表的代码。 基本结构 struct LNode &#123; int data; LNode* l; LNode* r; &#125;; typedef struct LNode LNode; typedef struct LNode * LinkList...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":5,"path":"api/tags/数据结构.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"基础算法 | 前缀和","uid":"52b22c68a76813c2ab065580311ca50e","slug":"prefix_sum","date":"2021-03-13T12:30:00.000Z","updated":"2022-08-01T01:53:18.571Z","comments":true,"path":"api/articles/prefix_sum.json","keywords":null,"cover":"/img/algorithm.png","text":"Description: 前缀和是处理区间查询的快速手段。 基本概念 一维前缀和 用数列观点理解就是前 nnn 项和，原序列是 ana_nan​，它的前缀和就是 Sn=∑i=1naiS_n=\\sum_{i=1}^{n} a_i Sn​=i=1∑n​ai​ 对于序列 {an}\\{a...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"前缀和","slug":"前缀和","count":1,"path":"api/tags/前缀和.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"[Demo] 归并排序","uid":"1abc49c5902eda16bbaa0acd742568ec","slug":"demo_mergesort","date":"2020-10-02T16:00:00.000Z","updated":"2020-12-18T09:20:20.000Z","comments":true,"path":"api/articles/demo_mergesort.json","keywords":null,"cover":"/img/algorithm.png","content":"<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Merge</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> M<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/*此处数组的头指针和尾指针需要参数给出，便于获取数组长度*/</span>\n\n\n\n    <span class=\"token keyword\">int</span> LEFT_SIZE <span class=\"token operator\">=</span> M <span class=\"token operator\">-</span> L <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//M算作左序列一份子，左序列长度额外加一</span>\n    <span class=\"token keyword\">int</span> RIGHT_SIZE <span class=\"token operator\">=</span> R <span class=\"token operator\">-</span> M<span class=\"token punctuation\">;</span> <span class=\"token comment\">//M不算右序列份子，右序列长度不需要加一</span>\n    \n    <span class=\"token comment\">//分别新建数组存放左、右子序列</span>\n    <span class=\"token keyword\">int</span> L_arr<span class=\"token punctuation\">[</span>LEFT_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> R_arr<span class=\"token punctuation\">[</span>RIGHT_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//先原封不动将数组左、右两边分别copy到左、右子序列</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> L<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> M<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//M是属于左序列的，所以要从L到M遍历</span>\n        L_arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> R<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//M不属于右序列，所以从(M+1)遍历到R</span>\n        R_arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>M<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//复制完毕后，同时操作左右子序列，排序、重构母序列</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//左序列起始位置</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//右序列起始位置</span>\n    <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> L<span class=\"token punctuation\">;</span> <span class=\"token comment\">//k作为母序列控制指针</span>\n\n    <span class=\"token comment\">//i,j都未到终点时，交替移动</span>\n    <span class=\"token comment\">//此处不等号不取等，就是因为数组长度与末位下标相差1</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> LEFT_SIZE  <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> RIGHT_SIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L_arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> R_arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L_arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> R_arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//若j先超过终点，将左边子序列后面剩余的数按顺序照搬到母序列</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> LEFT_SIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L_arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//若i先超过终点，将右边子序列后面剩余的数按顺序照搬到母序列</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> RIGHT_SIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> R_arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">MergeSort</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> R<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/*\n    为什么将分界点的计算放到MergeSort()里面而非其他位置？\n    1.Merge()是被MergeSort()调用的子函数，在MergeSort中算出M，以参数形式传给Merge()，更方便\n    2.避免了在main()中计算M的麻烦，保证了main()中只写主干程序\n    */</span>\n\n    <span class=\"token comment\">/*\n        此处有巨坑，算出半长度后要记得加上左指针值，\n        另外要考虑整数除法其实是向下取整的，\n        要特别注意到最深处（每个子序列只有一个数）时，L,M,R的取值分别是多少，\n        以此确定[防止递归死循环的判定条件]应该怎么写，\n        可以举简单序列在纸上模拟运行到最后一步，观察L,M,R的特点，\n        本例中得出判定条件为 if (L > (R-1))\n    */</span>\n    <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> L <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>R <span class=\"token operator\">-</span> L<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//中点到底偏向哪边不重要，举简单例子观察就行</span>\n    \n    <span class=\"token comment\">//递归调用函数必备，防死循环的条件判定</span>\n    <span class=\"token comment\">//一般来讲，最好通过观察实际用例来写，yy很容易出错</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>R<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//输入待排序列的长度与内容</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">100000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//排序</span>\n    <span class=\"token function\">MergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//输出结果</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*\n    补充：\n    1.测试用例一定要全面，长度为奇数和偶数的序列都要测试；\n    2.从0开始还是从1开始？在写的时候就要想好，等全部码完再查错很困难；\n    3.不等号到底要不要取等？用特殊样例测清楚再写；\n    4.如果从0开始管理数组，特别注意数组长度和末尾下标之间是相差1的；\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"#include &lt;stdio.h> #include &lt;stdlib.h> void Merge (int arr[], int L, int M, int R) &#123; /*此处数组的头指针和尾指针需要参数给出，便于获取数组长度*/ int LEFT_SIZ...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"排序","slug":"排序","count":4,"path":"api/tags/排序.json"}],"toc":"","author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"[Demo] 堆排序","uid":"91488b0487c2b26df0c04913aab99fd6","slug":"demo_heapsort","date":"2020-10-03T16:00:00.000Z","updated":"2020-12-08T02:29:49.000Z","comments":true,"path":"api/articles/demo_heapsort.json","keywords":null,"cover":"/img/algorithm.png","text":"#include &lt;stdio.h> void SwapInArray(int arr[], int x, int y) &#123; /*Function：将数组中两个元素的值进行交换*/ int tmp; tmp = arr[x]; arr[x] = arr[y]; a...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"排序","slug":"排序","count":4,"path":"api/tags/排序.json"},{"name":"堆","slug":"堆","count":3,"path":"api/tags/堆.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}
{"title":"LC 724 寻找数组中心索引","uid":"87fe1dbbd2e32cc15a0b1461130095f4","slug":"find_middle_index","date":"2020-10-19T16:00:00.000Z","updated":"2020-12-08T10:31:18.000Z","comments":true,"path":"api/articles/find_middle_index.json","keywords":null,"cover":"/img/leetcode.png","content":"<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h2>\n<p>给定一个整数类型的数组 nums，请编写一个能够返回数组 “中心索引” 的方法。</p>\n<p>我们是这样定义数组 中心索引 的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。</p>\n<p>如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。</p>\n<span id=\"more\"></span>\n<p></p>\n<p>示例 1：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：\nnums &#x3D; [1, 7, 3, 6, 5, 6]\n输出：3\n解释：\n索引 3 (nums[3] &#x3D; 6) 的左侧数之和 (1 + 7 + 3 &#x3D; 11)，与右侧数之和 (5 + 6 &#x3D; 11) 相等。\n同时, 3 也是第一个符合要求的中心索引。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>示例 2：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：\nnums &#x3D; [1, 2, 3]\n输出：-1\n解释：\n数组中不存在满足此条件的中心索引。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>说明：</p>\n<ul>\n<li>nums 的长度范围为 [0, 10000]。</li>\n<li>任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。</li>\n</ul>\n<p>来源：力扣（LeetCode）<br />\n链接：<a href=\"https://leetcode-cn.com/problems/find-pivot-index\">https://leetcode-cn.com/problems/find-pivot-index</a></p>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\"></a> 分析</h2>\n<ol>\n<li>外层循环对数组每个元素进行遍历</li>\n<li>内层两个分开的循环，左指针遍历当前元素左边的元素并求和，右指针遍历当前元素右边的元素并求和，然后比较左右和是否相等，相等则截断操作并返回索引值</li>\n<li>后来发现自己是SB，明明可以不用右指针，可在一开始就遍历数组元素，对所有元素求和并储存all_sum，以后每次得到left_sum时，可直接用一条减法来算出right_sum，就不用浪费时间</li>\n<li>注意自己测试的用例一定要涵盖一般情况和特殊情况，确定没有问题再提交</li>\n<li>传参时传入指向数组的指针时，在函数中可直接用数组名访问数组（因为实际上这个指针传入的就是数组的首地址，跟直接传数组名是一样的效果）</li>\n<li>注意小细节：for循环最后一步的自增，小于号取不取等，是否所有的输入情况都已经保证函数有出口（返回值）…</li>\n</ol>\n<h2 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">pivotIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> left_sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> right_sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l_piv <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r_piv <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> all_sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> numsSize<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        all_sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numsSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>l_piv <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> l_piv <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> l_piv<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            left_sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>l_piv<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        right_sum <span class=\"token operator\">=</span> all_sum <span class=\"token operator\">-</span> left_sum <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// for (r_piv = numsSize-1; r_piv > l_piv; r_piv--) &#123;</span>\n        <span class=\"token comment\">//     right_sum += nums[r_piv];</span>\n        <span class=\"token comment\">// &#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left_sum <span class=\"token operator\">==</span> right_sum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> l_piv<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        left_sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        right_sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//printf(\\n);</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> numsSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":" 题目 给定一个整数类型的数组 nums，请编写一个能够返回数组 “中心索引” 的方法。 我们是这样定义数组 中心索引 的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。 如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"题解","slug":"题解","count":16,"path":"api/tags/题解.json"},{"name":"数组","slug":"数组","count":3,"path":"api/tags/数组.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE\"><span class=\"toc-text\"> 题目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90\"><span class=\"toc-text\"> 分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\"> 代码</span></a></li></ol>","author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"VuePress部署轻量级个人博客","uid":"3b3adefb31727270472d3ca610693d83","slug":"vuepress_configurating","date":"2020-10-23T16:00:00.000Z","updated":"2020-12-08T10:25:16.000Z","comments":true,"path":"api/articles/vuepress_configurating.json","keywords":null,"cover":"/img/vuepress_build/vuepress.png","text":"本文介绍笔者折腾 VuePress 的过程。 1. 安装node.js 到官网下载稳定版安装即可 2. 按照官网指示进行基本安装配置 创建目录 包管理器初始化（yarn, npm二选一） 安装vuepress为本地依赖 创建docs目录，并在下面手动创建README.md pac...","link":"","photos":[],"count_time":{"symbolsCount":996,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"},{"name":"博客","slug":"博客","count":1,"path":"api/tags/博客.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LC 73 矩阵置零","uid":"bf14c276bb885a007bbd4fa6c728a7f6","slug":"zero_matrix","date":"2020-10-19T16:00:00.000Z","updated":"2020-12-08T10:29:58.000Z","comments":true,"path":"api/articles/zero_matrix.json","keywords":null,"cover":"/img/leetcode.png","text":" 题目 给定一个 m x n 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用原地算法。 示例 1: 输入: [ [1,1,1], [1,0,1], [1,1,1] ] 输出: [ [1,0,1], [0,0,0], [1,0,1] ] 示例 2: 输入:...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"题解","slug":"题解","count":16,"path":"api/tags/题解.json"},{"name":"数组","slug":"数组","count":3,"path":"api/tags/数组.json"},{"name":"矩阵","slug":"矩阵","count":1,"path":"api/tags/矩阵.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
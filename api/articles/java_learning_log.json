{"title":"Java 学习日记","uid":"754f99333c5dda7ed7c4177b7a031b14","slug":"java_learning_log","date":"2020-11-27T16:00:00.000Z","updated":"2020-12-08T09:07:22.000Z","comments":true,"path":"api/articles/java_learning_log.json","keywords":null,"cover":null,"content":"<p>记录 Java 学习之路的点点滴滴</p>\n<span id=\"more\"></span>\n<p><strong>2020/12/06</strong></p>\n<ul>\n<li><strong>面向对象基础 6</strong>\n<ul>\n<li>多态性\n<ul>\n<li>父类的引用指向子类的对象</li>\n<li>该对象的方法列表与父类相同</li>\n<li>当该对象调用它的某个方法时，若该方法被子类重写过，则实际执行的是子类的方法</li>\n<li>多态是方法的多态，与属性无关</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>2020/12/05</strong></p>\n<ul>\n<li>是的，今天太nm忙了，没学💔</li>\n</ul>\n<p><strong>2020/12/04</strong></p>\n<ul>\n<li><strong>面向对象基础 5</strong>\n<ul>\n<li>方法的重写\n<ul>\n<li>子类继承父类之后，可以重写父类的<strong>同名同参</strong>方法</li>\n<li>重写方法的权限修饰符<strong>不允许降级</strong></li>\n<li>父类中的<strong>私有方法不允许子类重写</strong></li>\n<li>假设被重写方法的返回值为 A 类型，则重写方法的返回值类型只能是 A 或 A 的子类（若是基本数据类型则必须严格相同）</li>\n<li>重写方法抛出的异常类型不大于被重写方法的抛出异常类型</li>\n<li>静态方法不可以被重写</li>\n<li><code>@Override</code> 注解</li>\n</ul>\n</li>\n<li><code>super</code> 与 <code>this</code> 关键字\n<ul>\n<li>父类和子类的属性可以同名（没有覆盖之说）</li>\n<li>用 <code>this</code> 调属性时，先从本类找起，找不到再逐步往上去父类找</li>\n<li>用 <code>super</code> 调属性时，跳过本类，从直接父类开始往上找，直到找到为止</li>\n<li><code>super()</code> 表示直接调用父类构造器</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>2020/12/03</strong></p>\n<ul>\n<li><strong>JDBC</strong>\n<ul>\n<li>Client / Server 和 Browser / Server 架构的对比</li>\n<li>JavaWeb 知识框架概览</li>\n</ul>\n</li>\n<li><strong>数据库</strong>\n<ul>\n<li>MySQL 安装与基本配置</li>\n<li>SQL 的基本查询语句学习</li>\n</ul>\n</li>\n</ul>\n<p><strong>2020/12/02</strong></p>\n<ul>\n<li><strong>面向对象基础 4</strong>\n<ul>\n<li>继承性\n<ul>\n<li><code>extends</code> 关键字</li>\n<li>父类 (SuperClass) 与子类 (SubClass)</li>\n<li>直接父类与间接父类</li>\n<li>继承内容包括父类的属性和方法</li>\n<li><strong>Java 只支持单继承和多层继承</strong>（即子类的父类最多只能有一个，与人类社会规则相似）</li>\n<li>自定义类默认继承于 <code>java.lang.Object</code> 类</li>\n<li>IDEA 中快捷键 <code>Ctrl</code> + <code>H</code> 可调出 Hierarchy 视图查看继承树</li>\n</ul>\n</li>\n<li>项目二 客户信息管理系统\n<ul>\n<li>MVC 模式简单实践</li>\n<li><code>Customer</code> 类封装数据对象</li>\n<li><code>CustomerList</code> 类负责对象管理与增删改查等逻辑</li>\n<li><code>CustomerView</code> 类负责视图界面与用户响应</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>2020/12/01</strong></p>\n<ul>\n<li><strong>面向对象基础 3</strong>\n<ul>\n<li>\n<p><code>import static</code> 关键字</p>\n<ul>\n<li>用于导入某个包下的<strong>静态结构</strong></li>\n<li>例如 <code>import static java.lang.Math.*</code> 之后可以不用再写 <code>Math.</code></li>\n</ul>\n</li>\n<li>\n<p><code>import</code> 关键字</p>\n<ul>\n<li>用于导入某个包下的指定类/接口（<strong>不包括子包中的结构</strong>）</li>\n<li>写在导包语句的后面</li>\n<li>使用 <code>.*</code> 代表导入包内的所有类/接口</li>\n<li><code>java.lang</code> 包的导入默认省略</li>\n<li>若要使用不同包下的同名类，则在类名前面加包名即可</li>\n</ul>\n</li>\n<li>\n<p><code>package</code> 关键字</p>\n<ul>\n<li>使用包管理类</li>\n<li>声明在每个下属类文件的首行</li>\n<li>命名中 <code>.</code> 代表文件目录层级</li>\n<li>同一包下的类和接口不允许出现同名</li>\n<li>JDK 提供的常用包\n<table>\n<thead>\n<tr>\n<th>Package Name</th>\n<th>Classes Included</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>java.lang</td>\n<td><code>String</code>，<code>System</code>，<code>Math</code>，<code>Object</code> 等核心类</td>\n</tr>\n<tr>\n<td>java.util</td>\n<td>日期日历、集合框架等实用工具类</td>\n</tr>\n<tr>\n<td><a href=\"http://java.io\">java.io</a></td>\n<td>输入/输出功能类</td>\n</tr>\n<tr>\n<td><a href=\"http://java.net\">java.net</a></td>\n<td>与网络有关的操作接口</td>\n</tr>\n<tr>\n<td>java.sql</td>\n<td>进行 JDBC 数据库编程的有关类和接口</td>\n</tr>\n<tr>\n<td>java.awt</td>\n<td>用于构建 GUI 的有关类</td>\n</tr>\n<tr>\n<td>java.text</td>\n<td>格式化相关类</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n<li>\n<p><code>this()</code> 调用构造器</p>\n<ul>\n<li>高级构造器调用低级构造器，减少代码冗余</li>\n<li>若要调用必须写在第一行</li>\n</ul>\n</li>\n<li>\n<p><code>this</code> 关键字</p>\n<ul>\n<li>在方法内部使用，表示方法所属对象的引用</li>\n<li>在构造器内部使用，表示正在构造的对象</li>\n</ul>\n</li>\n<li>\n<p>UML 类图</p>\n</li>\n<li>\n<p>JavaBean（符合以下标准的类）</p>\n<ul>\n<li>类是公共的</li>\n<li>有一个空参的构造器</li>\n<li>有属性以及对应的访问器和设置器</li>\n</ul>\n</li>\n<li>\n<p>构造器 Constructor</p>\n<ul>\n<li>未自定义构造器时，系统默认提供空参构造器，一旦自定义，那么系统不会再提供，空参构造器也要自己写</li>\n<li>不应理解为特殊的方法</li>\n<li>可以设置权限</li>\n<li>可重载，用于创建对象、初始化属性</li>\n</ul>\n</li>\n<li>\n<p>类的属性的封装</p>\n<ul>\n<li>权限\n<ul>\n<li>设置为 <code>private</code> 不允许直接访问和修改</li>\n</ul>\n</li>\n<li>访问器\n<ul>\n<li>提供公共的 <code>getVal</code> 方法获取值</li>\n</ul>\n</li>\n<li>设置器\n<ul>\n<li>相比直接调属性赋值，设置器可以提供检查输入规范的入口，防止出现非法数据赋值</li>\n</ul>\n</li>\n<li><strong>IDEA 右键空白处 <code>Generate</code> 可以一键生成 <code>Getter and Setter</code></strong></li>\n</ul>\n</li>\n<li>\n<p>权限修饰符</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>类的内部</th>\n<th>同一个包下</th>\n<th>不同包的子类</th>\n<th>同一个工程</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>private</td>\n<td>√</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>(default)</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>protected</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td></td>\n</tr>\n<tr>\n<td>public</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n</tbody>\n</table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Class 只能被 public 或 (default) 修饰，(default) 类跨包不可用</p></blockquote>\n<p><strong>总结</strong>：跨包仅 <code>public</code> 可见，包内 <code>(default)</code> 与 <code>public</code> 可见.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>2020/11/30</strong></p>\n<ul>\n<li><strong>面向对象基础 2</strong>\n<ul>\n<li>构造器 Setter\n<ul>\n<li>类要写在主类外面才能用 <code>this</code></li>\n</ul>\n</li>\n<li>访问器 Getter</li>\n<li>对象数组的内存解析\n<ul>\n<li>栈空间存数组首地址，堆空间存数组内容</li>\n<li>数组元素的值为<strong>对象的地址</strong>（地址中包含了对象的类型）</li>\n</ul>\n</li>\n<li>匿名对象\n<ul>\n<li>直接调用仅限一次</li>\n<li>常用于方法传参</li>\n</ul>\n</li>\n<li>自定义工具类\n<ul>\n<li>将自己常用的函数封装到自己的类库中</li>\n<li>只要在同一个 <code>package</code> 下就可以调用</li>\n<li>调用前需要先 new 一个 <code>工具类对象</code></li>\n</ul>\n</li>\n<li>方法的重载\n<ul>\n<li>同名方法，参数类型/个数不同</li>\n<li>可变个数的形参\n<ul>\n<li><code>public void method(String ... strs) &#123;&#125;</code></li>\n<li>可变个数指的是 0 个 ~ 多个</li>\n<li>一个方法最多传一个可变形参</li>\n<li>必须放在参数列表最后一个</li>\n<li>会与数组传参的方式冲突（两者不构成重载）</li>\n<li>在函数内需要遍历时直接当作数组来操作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>引用和传参\n<ul>\n<li>参数传递都是值传递</li>\n<li>基本数据类型传数据值，引用数据类型传地址值</li>\n<li>对象之间赋值，只是赋地址，指向堆空间中同一个对象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>关于 <code>println()</code> 方法\n<ul>\n<li>传入参数为非 <code>char</code> 数组名时，打印出来的是首地址值</li>\n<li>传入 <code>char[]</code> 数组名时，由于 <code>PrintStream</code> 库中 <code>println()</code> 方法单独对字符数组做了重载，打印出来的结果是整个字符数组的所有元素连在一起组成的字符串</li>\n</ul>\n</li>\n</ul>\n<p><strong>2020/11/29</strong></p>\n<ul>\n<li>\n<p><strong>面向对象基础 1</strong></p>\n<ul>\n<li>与面向过程的区别\n<ul>\n<li>面向过程注重事件和函数</li>\n<li>面向对象注重类和对象的抽象设计</li>\n</ul>\n</li>\n<li>类和对象</li>\n<li>属性和方法</li>\n<li>对象的引用</li>\n<li>对象的内存解析\n<ul>\n<li>栈空间存放引用和地址</li>\n<li>堆空间存放数据块</li>\n</ul>\n</li>\n<li>成员变量和局部变量\n<ul>\n<li>局部变量没有权限修饰符</li>\n<li>局部变量没有默认初始化值</li>\n<li>非 static 属性加载到堆空间，局部变量加载到栈空间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>常见数组异常</strong></p>\n<ul>\n<li><code>ArraysIndexOutOfBoundsException</code> 下标越界</li>\n<li><code>NullPointerException</code> 空指针异常</li>\n</ul>\n</li>\n<li>\n<p><strong>常用数组方法</strong></p>\n<ul>\n<li><code>Arrays.equals(int[] a, int[] b)</code> 判断两数组是否相同</li>\n<li><code>Arrays.fill(int[] arr, int val)</code> 以指定值填充数组</li>\n<li><code>Arrays.toString(int[] a)</code> 转换为便于输出的字符串</li>\n<li><code>Arrays.sort(int[] a)</code> 底层为快排</li>\n<li><code>Arrays.binarySearch(int[] a)</code> 二分查找</li>\n</ul>\n</li>\n<li>\n<p><strong>一维、二维数组的内存解析</strong></p>\n<ul>\n<li>栈空间放地址</li>\n<li>堆空间放内容</li>\n<li>二维数组声明时第一维长度不能省略</li>\n<li>二维数组内容为地址</li>\n<li>垃圾回收机制检测没有指针指向的内存进行回收</li>\n</ul>\n</li>\n</ul>\n<p><strong>2020/11/28</strong></p>\n<ul>\n<li>InteliJ IDEA 2020 安装与基本配置</li>\n<li>IDEA Key Map</li>\n<li>常用 IDEA Templates</li>\n<li>自定义 Templates</li>\n<li>IDEA 连接 Github 进行 Clone、Push、Share</li>\n<li>IDEA Debugger 断点调试 Step 与变量监视 Evaluate</li>\n</ul>\n<p>笔记： <code>尚硅谷_宋红康_IntelliJIDEA的安装、配置与使用.pdf</code></p>\n","text":"记录 Java 学习之路的点点滴滴 2020/12/06 面向对象基础 6 多态性 父类的引用指向子类的对象 该对象的方法列表与父类相同 当该对象调用它的某个方法时，若该方法被子类重写过，则实际执行的是子类的方法 多态是方法的多态，与属性无关 2020/12/05 是的，今天太n...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":1,"path":"api/categories/Java.json"}],"tags":[{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"},{"name":"日志","slug":"日志","count":1,"path":"api/tags/日志.json"}],"toc":"","author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MySQL 学习笔记","uid":"f474005b89a7d8e14b470713255edb89","slug":"mysql_note","date":"2020-12-03T03:24:00.000Z","updated":"2020-12-08T09:04:38.000Z","comments":true,"path":"api/articles/mysql_note.json","keywords":null,"cover":"/img/mysql.png","text":"本文记录笔者学习 MySQL 的过程和笔记 下载和安装 Community Server 免费 https://dev.mysql.com/downloads 术语 Term Description Remarks DB Database DBMS Database Manage...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"数据库","slug":"数据库","count":1,"path":"api/categories/数据库.json"}],"tags":[{"name":"数据库","slug":"数据库","count":1,"path":"api/tags/数据库.json"},{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"数据结构 | 优先队列","uid":"badbb3e5dd9e6f65834da5c97268e39f","slug":"priority_queue","date":"2020-11-22T02:15:00.000Z","updated":"2020-12-08T10:14:24.000Z","comments":true,"path":"api/articles/priority_queue.json","keywords":null,"cover":"/img/data_structure.png","text":"本文介绍数据结构——优先队列 代码实现 前置辅助函数 private boolean less(int i, int j) &#123; return pq[i].compareTo(pq[j]) &lt; 0; &#125; private void exch (int i, ...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"排序","slug":"排序","count":4,"path":"api/tags/排序.json"},{"name":"堆","slug":"堆","count":3,"path":"api/tags/堆.json"},{"name":"数据结构","slug":"数据结构","count":5,"path":"api/tags/数据结构.json"},{"name":"优先队列","slug":"优先队列","count":1,"path":"api/tags/优先队列.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
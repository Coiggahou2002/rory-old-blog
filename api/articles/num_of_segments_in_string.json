{"title":"LC 434 字符串中的单词个数","uid":"b513457641c5d77aabc90d59ad7c2b99","slug":"num_of_segments_in_string","date":"2020-11-01T16:00:00.000Z","updated":"2020-12-08T10:29:16.000Z","comments":true,"path":"api/articles/num_of_segments_in_string.json","keywords":null,"cover":"/img/leetcode.png","content":"<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h2>\n<p>You are given a string <code>s</code> , return <em>the number of segments in the string</em>.</p>\n<p>A <strong>segment</strong> is defined to be a contiguous sequence of <strong>non-space characters</strong>.</p>\n<span id=\"more\"></span>\n<p><strong>Example 1:</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">Input</span><span class=\"token punctuation\">:</span> s = \"Hello<span class=\"token punctuation\">,</span> my name is John\"\n<span class=\"token key atrule\">Output</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n<span class=\"token key atrule\">Explanation</span><span class=\"token punctuation\">:</span> The five segments are <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello,\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"my\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"is\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>Example 2:</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">Input</span><span class=\"token punctuation\">:</span> s = \"Hello\"\n<span class=\"token key atrule\">Output</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>Example 3:</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">Input</span><span class=\"token punctuation\">:</span> s = \"love live<span class=\"token tag\">!</span> mu'sic forever\"\n<span class=\"token key atrule\">Output</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>Example 4:</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">Input</span><span class=\"token punctuation\">:</span> s = \"\"\n<span class=\"token key atrule\">Output</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li><code>0 &lt;= s.length &lt;= 300</code></li>\n<li><code>s</code> consists of lower-case and upper-case English letters, digits or one of the following characters <code>&quot;!@#$%^&amp;*()_+-=',.:&quot;</code>.</li>\n<li>The only space character in <code>s</code> is <code>' '</code>.</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>来源：力扣（LeetCode）<br />\n链接：<a href=\"https://leetcode-cn.com/problems/number-of-segments-in-a-string\">https://leetcode-cn.com/problems/number-of-segments-in-a-string</a><br />\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\"></a> 分析</h2>\n<p>既然题目说<strong>只要不是空格的都算字符</strong>，那此题本质上等价于：提供一个只有 <code>0</code> 和 <code>1</code> 两种元素的字符串（数组），找出连续的 <code>1</code> 串的个数。<br />\n将串以【字符段】和【空格段】分成若干片段，为这两种片段分别设置不同的入口，分别处理。<strong>在【字符段】切换到【空格段】的时候给计数器加一。</strong><br />\n最后额外处理临界情况——字符串以【字符段】结束的情况。<br />\n由于只遍历字符串一次，因此时间复杂度O(n)，空间复杂度O(1)</p>\n<p><strong>Leetcode提交</strong><br />\n时间性能击败 <code>100%</code> 的 <code>C</code> 提交者<br />\n空间性能击败 <code>11%</code> 的 <code>C</code> 提交者</p>\n<h2 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">countSegments</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//统计单词个数</span>\n    \n    <span class=\"token comment\">//特殊情况出口</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">==</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//外层循环推进整体扫描</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//内层循环对[字符段]-[空格段]交替处理</span>\n        <span class=\"token comment\">//while处理字符段</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">!=</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//只要遇到字符就推进</span>\n            s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//字符推进被空格截断则更新统计</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//更新完跳出循环，切换到对空格段的推进</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//if处理空格段</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//整体扫描完成后，将指向结束符的指针回退一格</span>\n    s<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//若串的最后以字符结束，需要特殊处理</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">!=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"其他解法\"><a class=\"markdownIt-Anchor\" href=\"#其他解法\"></a> 其他解法</h2>\n<p>待补充</p>\n","text":" 题目 You are given a string s , return the number of segments in the string. A segment is defined to be a contiguous sequence of non-space ch...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"题解","slug":"题解","count":16,"path":"api/tags/题解.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE\"><span class=\"toc-text\"> 题目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90\"><span class=\"toc-text\"> 分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\"> 代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E8%A7%A3%E6%B3%95\"><span class=\"toc-text\"> 其他解法</span></a></li></ol>","author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LC 14 最长公共前缀","uid":"d86afd4df1294e5c09b8411c6186d560","slug":"longest_common_prefix","date":"2020-11-01T16:00:00.000Z","updated":"2020-12-08T10:29:07.000Z","comments":true,"path":"api/articles/longest_common_prefix.json","keywords":null,"cover":"/img/leetcode.png","text":" 题目 编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 &quot;&quot; 。 示例 1: 输入: [\"flower\",\"flow\",\"flight\"] 输出: \"fl\" 示例 2: 输入: [\"dog\",\"racecar\",\"car\"] ...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"题解","slug":"题解","count":16,"path":"api/tags/题解.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LC 520 检测大写字母","uid":"a9678d67ca5c601b58ad6876d5f2a753","slug":"check_capital_letter","date":"2020-10-31T16:00:00.000Z","updated":"2020-12-08T10:27:59.000Z","comments":true,"path":"api/articles/check_capital_letter.json","keywords":null,"cover":"/img/leetcode.png","text":" 题目 给定一个单词，你需要判断单词的大写使用是否正确。 我们定义，在以下情况时，单词的大写用法是正确的： 全部字母都是大写，比如&quot;USA&quot;。 单词中所有字母都不是大写，比如&quot;leetcode&quot;。 如果单词不只含有一个字母，只有首字母大写，...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"题解","slug":"题解","count":16,"path":"api/tags/题解.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
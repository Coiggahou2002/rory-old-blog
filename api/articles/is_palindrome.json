{"title":"LC 125 验证回文串","uid":"1905b17da4d915d445f9b18f99561b69","slug":"is_palindrome","date":"2020-10-31T16:00:00.000Z","updated":"2020-12-08T10:28:57.000Z","comments":true,"path":"api/articles/is_palindrome.json","keywords":null,"cover":"/img/leetcode.png","content":"<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h2>\n<p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>\n<span id=\"more\"></span>\n<p>说明：本题中，我们将空字符串定义为有效的回文串。</p>\n<p>示例 1:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">\n<span class=\"token key atrule\">输入</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A man, a plan, a canal: Panama\"</span>\n<span class=\"token key atrule\">输出</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>示例 2:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">输入</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"race a car\"</span>\n<span class=\"token key atrule\">输出</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>来源：力扣（LeetCode）<br />\n链接：<a href=\"https://leetcode-cn.com/problems/valid-palindrome\">https://leetcode-cn.com/problems/valid-palindrome</a><br />\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\"></a> 分析</h2>\n<h3 id=\"整体思路框架\"><a class=\"markdownIt-Anchor\" href=\"#整体思路框架\"></a> 整体思路框架</h3>\n<p>头尾双指针向中间移动，凡是遇到非法字符就跳过，判断所有 <code>有效字符对</code> 是否符合要求，若直到两指针碰面都没有退出函数，说明所给串是回文串。</p>\n<h3 id=\"对大小写字母的处理\"><a class=\"markdownIt-Anchor\" href=\"#对大小写字母的处理\"></a> 对大小写字母的处理</h3>\n<p>在最开始写代码的时候，我通过<strong>判断两字符差的绝对值是否为32</strong>来实现<strong>判断大小写字母是否成对</strong>，这样问题是非常大的，当我遇到测试用例 <code>&quot;0P&quot;</code> 时，才意识到，这样判断不出差错的前提是<strong>已知这两个字符都是英文字母</strong>，否则只要在ASCII码表中随意隔32抽两个字符都可以通过判断。</p>\n<p>由上述可知，应该首先判断两个字符都为英文字母，再判断两者差的绝对值为32，才可判定它们是“大小对”。</p>\n<p>但实际上有更简单的处理方法，因为我用的“头尾指针法”在一开始就需要将串遍历一次，所以<strong>不妨利用这次遍历，顺便将所有英文字母统一成大写字母或者小写字母</strong>，这样一来在后续判断中只需要单纯判断两字符是否相等，即可涵盖数字和字母两种情况了。</p>\n<p>另外还需要注意的是，ASCII码表中，<code>A~Z</code> 是位于 <code>a~z</code> 之前的，而且很重要的一点是，<strong>他们是分开的两个连续块</strong>，换句话说，<code>Z</code> 与 <code>a</code> 之间还有若干个非英文字母字符，特别注意！<br />\n<img src=\"/cjpark/img/is_palindrome/ascii.jpg\" alt=\"\" /></p>\n<h3 id=\"双指针的思想\"><a class=\"markdownIt-Anchor\" href=\"#双指针的思想\"></a> 双指针的思想</h3>\n<p>个人感觉在字符串处理中经常用到的“双指针法”的思想根源来自于<strong>快速排序</strong>算法，这种双指针遍历的方法应该是融会贯通于其中的，以后需要多联想和归纳类似的题目。</p>\n<h2 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//初始检测，若是空串，直接返回true</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">==</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//定义辅助指针作头指针</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> headAsis<span class=\"token punctuation\">;</span> \n    headAsis <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//原指针移动到末尾，作尾指针</span>\n    <span class=\"token comment\">//扫描过程中顺便将所有大写字母转换为小写字母，免去后续比较的麻烦</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">>=</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'Z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token operator\">*</span>s <span class=\"token operator\">+=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    s<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将指向了结束符的尾指针回退1位</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>headAsis <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//头尾指针分别检测所指值，若既不是小写字母也不是数字，则继续向中间移动</span>\n        <span class=\"token comment\">//移动过程也要注意限制，不能让头指针超过尾指针</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>headAsis <span class=\"token operator\">&lt;</span> s <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>headAsis <span class=\"token operator\">&lt;</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>headAsis <span class=\"token operator\">></span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>headAsis <span class=\"token operator\">&lt;</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>headAsis <span class=\"token operator\">></span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            headAsis<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>headAsis <span class=\"token operator\">&lt;</span> s <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">&lt;</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">></span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">&lt;</span><span class=\"token char\">'0'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">></span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            s<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//若有效字符对符合要求，各自移动一格，重复循环</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>headAsis <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            headAsis<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            s<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//一旦出现不符合要求的字符对，退出</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//整个循环都没出问题，则为回文串</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"其他解法\"><a class=\"markdownIt-Anchor\" href=\"#其他解法\"></a> 其他解法</h2>\n<h3 id=\"使用辅助空间\"><a class=\"markdownIt-Anchor\" href=\"#使用辅助空间\"></a> 使用辅助空间</h3>\n<p>另开一个辅助字符数组，开始时先遍历原串，将合法字符（数字和字母）复制到辅助串中，复制完毕后，只需判断辅助串是否为简单的回文串即可，优点是简便，缺点是空间复杂度为O(|s|)</p>\n","text":" 题目 给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 说明：本题中，我们将空字符串定义为有效的回文串。 示例 1: 输入: \"A man, a plan, a canal: Panama\" 输出: true 示例 2: 输入: \"race a ...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"题解","slug":"题解","count":16,"path":"api/tags/题解.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE\"><span class=\"toc-text\"> 题目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90\"><span class=\"toc-text\"> 分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\"> 整体思路框架</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E5%A4%A7%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D%E7%9A%84%E5%A4%84%E7%90%86\"><span class=\"toc-text\"> 对大小写字母的处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E6%8C%87%E9%92%88%E7%9A%84%E6%80%9D%E6%83%B3\"><span class=\"toc-text\"> 双指针的思想</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\"> 代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E8%A7%A3%E6%B3%95\"><span class=\"toc-text\"> 其他解法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E8%BE%85%E5%8A%A9%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\"> 使用辅助空间</span></a></li></ol></li></ol>","author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LC 520 检测大写字母","uid":"a9678d67ca5c601b58ad6876d5f2a753","slug":"check_capital_letter","date":"2020-10-31T16:00:00.000Z","updated":"2020-12-08T10:27:59.000Z","comments":true,"path":"api/articles/check_capital_letter.json","keywords":null,"cover":"/img/leetcode.png","text":" 题目 给定一个单词，你需要判断单词的大写使用是否正确。 我们定义，在以下情况时，单词的大写用法是正确的： 全部字母都是大写，比如&quot;USA&quot;。 单词中所有字母都不是大写，比如&quot;leetcode&quot;。 如果单词不只含有一个字母，只有首字母大写，...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"题解","slug":"题解","count":16,"path":"api/tags/题解.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"归纳总结 | 指针","uid":"65abd3d32b27895ac3ec803fdc1b4589","slug":"pivot_and_array","date":"2020-10-30T16:00:00.000Z","updated":"2020-12-08T10:23:41.000Z","comments":true,"path":"api/articles/pivot_and_array.json","keywords":null,"cover":null,"text":"本文介绍 C 语言中的指针和数组相关知识。 基础知识 变量 一个变量具有三项属性： 属性 解释 数据类型 (Element Type) 如 int ，char 地址 (Memory Address) 对于64位计算机来讲，一条内存地址值占8个字节 值 (Value) 变量的“内容...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"C/C++","slug":"C-C","count":2,"path":"api/categories/C-C.json"}],"tags":[{"name":"C/C++","slug":"C-C","count":2,"path":"api/tags/C-C.json"},{"name":"指针","slug":"指针","count":1,"path":"api/tags/指针.json"},{"name":"笔记总结","slug":"笔记总结","count":1,"path":"api/tags/笔记总结.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
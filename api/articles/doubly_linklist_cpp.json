{"title":"数据结构实现 | 双链表","uid":"787a127d9d6b0544e7ad2720504e8ca8","slug":"doubly_linklist_cpp","date":"2021-03-26T13:35:00.000Z","updated":"2021-03-31T13:04:15.000Z","comments":true,"path":"api/articles/doubly_linklist_cpp.json","keywords":null,"cover":"/img/data_structure.png","content":"<p>本文给出用C语言实现双链表的代码。</p>\n<span id=\"more\"></span>\n<h1 id=\"基本结构\"><a class=\"markdownIt-Anchor\" href=\"#基本结构\"></a> 基本结构</h1>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> l<span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span> LNode<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span> <span class=\"token operator\">*</span> LinkList；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"操作实现\"><a class=\"markdownIt-Anchor\" href=\"#操作实现\"></a> 操作实现</h1>\n<h2 id=\"初始化链表\"><a class=\"markdownIt-Anchor\" href=\"#初始化链表\"></a> 初始化链表</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">LinkList <span class=\"token function\">init_linklist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    LNode<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    head<span class=\"token operator\">-></span>l <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    head<span class=\"token operator\">-></span>r <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"在给定节点后插入新节点\"><a class=\"markdownIt-Anchor\" href=\"#在给定节点后插入新节点\"></a> 在给定节点后插入新节点</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//在节点p后插入值为x的节点</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tmp<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    tmp<span class=\"token operator\">-></span>l <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    tmp<span class=\"token operator\">-></span>r <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>r<span class=\"token punctuation\">)</span> p<span class=\"token operator\">-></span>r<span class=\"token operator\">-></span>l <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>r <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"在给定节点前插入新节点\"><a class=\"markdownIt-Anchor\" href=\"#在给定节点前插入新节点\"></a> 在给定节点前插入新节点</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//在节点p前插入值为x的节点</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">insert_before</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>l<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"头插节点\"><a class=\"markdownIt-Anchor\" href=\"#头插节点\"></a> 头插节点</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//在链表头插入值为x的节点</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">add_front</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"删除给定节点\"><a class=\"markdownIt-Anchor\" href=\"#删除给定节点\"></a> 删除给定节点</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//删除给出的p节点</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">delete_node</span><span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>r<span class=\"token punctuation\">)</span>  p<span class=\"token operator\">-></span>r<span class=\"token operator\">-></span>l <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>l<span class=\"token punctuation\">;</span>\n    p<span class=\"token operator\">-></span>l<span class=\"token operator\">-></span>r <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>r<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"获取链表长度\"><a class=\"markdownIt-Anchor\" href=\"#获取链表长度\"></a> 获取链表长度</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//返回链表长度（若只有头节点，长度为0）</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_length</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> L<span class=\"token operator\">-></span>r <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> iterator <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        iterator <span class=\"token operator\">=</span> iterator<span class=\"token operator\">-></span>r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"链表判空\"><a class=\"markdownIt-Anchor\" href=\"#链表判空\"></a> 链表判空</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//检查链表是否为空</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> L<span class=\"token operator\">-></span>r <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"顺序打印链表\"><a class=\"markdownIt-Anchor\" href=\"#顺序打印链表\"></a> 顺序打印链表</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//从头到尾打印整个链表</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print_list</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> iterator <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>r<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> iterator<span class=\"token operator\">-></span>data <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n        iterator <span class=\"token operator\">=</span> iterator<span class=\"token operator\">-></span>r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"按值查找节点\"><a class=\"markdownIt-Anchor\" href=\"#按值查找节点\"></a> 按值查找节点</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//从头到尾查找，返回第一个值为val的节点</span>\nLNode<span class=\"token operator\">*</span> <span class=\"token function\">get_node_by_val</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> L<span class=\"token operator\">-></span>r <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    LNode<span class=\"token operator\">*</span> t <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>data <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n        t <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"参考测试代码\"><a class=\"markdownIt-Anchor\" href=\"#参考测试代码\"></a> 参考测试代码</h1>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    LinkList test_list <span class=\"token operator\">=</span> <span class=\"token function\">init_linklist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">add_front</span><span class=\"token punctuation\">(</span>test_list<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">add_front</span><span class=\"token punctuation\">(</span>test_list<span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">add_front</span><span class=\"token punctuation\">(</span>test_list<span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    LNode<span class=\"token operator\">*</span> tmp1 <span class=\"token operator\">=</span> <span class=\"token function\">get_node_by_val</span><span class=\"token punctuation\">(</span>test_list<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">insert_after</span><span class=\"token punctuation\">(</span>tmp1<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">insert_before</span><span class=\"token punctuation\">(</span>tmp1<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">print_list</span><span class=\"token punctuation\">(</span>test_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">get_length</span><span class=\"token punctuation\">(</span>test_list<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">delete_node</span><span class=\"token punctuation\">(</span>tmp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">print_list</span><span class=\"token punctuation\">(</span>test_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    LNode<span class=\"token operator\">*</span> tmp2 <span class=\"token operator\">=</span> <span class=\"token function\">get_node_by_val</span><span class=\"token punctuation\">(</span>test_list<span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">delete_node</span><span class=\"token punctuation\">(</span>tmp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">print_list</span><span class=\"token punctuation\">(</span>test_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"本文给出用C语言实现双链表的代码。 基本结构 struct LNode &#123; int data; LNode* l; LNode* r; &#125;; typedef struct LNode LNode; typedef struct LNode * LinkList...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":6,"path":"api/tags/数据结构.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\"> 基本结构</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\"> 操作实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\"> 初始化链表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E7%BB%99%E5%AE%9A%E8%8A%82%E7%82%B9%E5%90%8E%E6%8F%92%E5%85%A5%E6%96%B0%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 在给定节点后插入新节点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E7%BB%99%E5%AE%9A%E8%8A%82%E7%82%B9%E5%89%8D%E6%8F%92%E5%85%A5%E6%96%B0%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 在给定节点前插入新节点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%B4%E6%8F%92%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 头插节点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E7%BB%99%E5%AE%9A%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 删除给定节点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E9%93%BE%E8%A1%A8%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\"> 获取链表长度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E5%88%A4%E7%A9%BA\"><span class=\"toc-text\"> 链表判空</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%BA%E5%BA%8F%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\"> 顺序打印链表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%89%E5%80%BC%E6%9F%A5%E6%89%BE%E8%8A%82%E7%82%B9\"><span class=\"toc-text\"> 按值查找节点</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\"> 参考测试代码</span></a></li></ol>","author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"数据结构实现 | 堆","uid":"492f874b3f1df40af4ebb1f2f51478f5","slug":"heap","date":"2021-03-29T08:26:00.000Z","updated":"2021-03-29T13:35:54.000Z","comments":true,"path":"api/articles/heap.json","keywords":null,"cover":"/img/data_structure.png","text":" 概述 堆是一棵完全二叉树，满足如下性质： 对于任意一个结点，其左、右子节点的值总是大于该节点的值（如果是最大堆则相反）. 一般用一维数组模拟堆，惯例下标从 1 开始，遵循此规范有如下结论： 若某节点索引为 iii，其左右儿子节点索引分别为 2i2i2i 与 (2i+1)(2i+...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":6,"path":"api/tags/数据结构.json"},{"name":"堆","slug":"堆","count":3,"path":"api/tags/堆.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"数据结构实现 | 单链表","uid":"5eff4f497e442b4699b87d24ee757803","slug":"singly_linklist_cpp","date":"2021-03-20T14:25:00.000Z","updated":"2021-03-26T14:34:12.000Z","comments":true,"path":"api/articles/singly_linklist_cpp.json","keywords":null,"cover":"/img/data_structure.png","text":"本文给出用C语言实现单链表的代码。 基本结构（带头节点） struct LNode &#123; int data; LNode* next; &#125;; typedef struct LNode LNode; typedef struct LNode* LinkList; ...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":6,"path":"api/tags/数据结构.json"},{"name":"链表","slug":"链表","count":4,"path":"api/tags/链表.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
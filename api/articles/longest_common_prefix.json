{"title":"LC 14 最长公共前缀","uid":"d86afd4df1294e5c09b8411c6186d560","slug":"longest_common_prefix","date":"2020-11-01T16:00:00.000Z","updated":"2020-12-08T10:29:07.000Z","comments":true,"path":"api/articles/longest_common_prefix.json","keywords":null,"cover":"/img/leetcode.png","content":"<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h2>\n<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\n<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code> 。</p>\n<span id=\"more\"></span>\n<p><strong>示例 1:</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">输入</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"flower\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"flow\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"flight\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key atrule\">输出</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"fl\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>示例 2:</strong></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">输入</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"racecar\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"car\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key atrule\">输出</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n<span class=\"token key atrule\">解释</span><span class=\"token punctuation\">:</span> 输入不存在公共前缀。\n说明<span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>所有输入只包含小写字母 <code>a-z</code> 。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>来源：力扣（LeetCode）<br />\n链接：<a href=\"https://leetcode-cn.com/problems/longest-common-prefix\">https://leetcode-cn.com/problems/longest-common-prefix</a><br />\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\"></a> 分析</h2>\n<h3 id=\"整体思路框架\"><a class=\"markdownIt-Anchor\" href=\"#整体思路框架\"></a> 整体思路框架</h3>\n<p>采用逐个串扫描（<strong>横向扫描</strong>）的方法，先扫描第一个与第二个串，获取它们的公共前缀，再将此公共前缀串与第三个串比较，更新公共前缀，然后与第四个，第五个比较…<br />\n<img src=\"/cjpark/img/longest_common_prefix/hxsm.png\" alt=\"\" /></p>\n<h3 id=\"小优化\"><a class=\"markdownIt-Anchor\" href=\"#小优化\"></a> 小优化</h3>\n<p>同样是逐串扫描，但不额外开辟空间来存放串与串比较得到的公共前缀串，而是使用一个整型变量 <code>max_len</code> 来记录和更新<strong>公共前缀的长度</strong>。<br />\n开局初始化 <code>max_len</code> 为第一个串的长度，然后与第二个串比较，更新 <code>max_len</code> ，然后比较第二、三个串（<strong>比较过程中只比较前 <code>max_len</code> 长度的部分，后面不理会</strong>）更新 <code>max_len</code> ，以此类推。<br />\n如此一来，<code>max_len</code> 必然越来越小，一般情况下可以大量减少位于后面的串的扫描次数，提高效率。</p>\n<h3 id=\"性能\"><a class=\"markdownIt-Anchor\" href=\"#性能\"></a> 性能</h3>\n<p>时间复杂度 <code>O(mn)</code> ，m为字符串平均长度，n为字符串个数。<br />\n空间复杂度 <code>O(1)</code> ，使用的辅助空间不随数据规模改变。</p>\n<p><strong>Leetcode提交记录</strong><br />\n用时 <code>0ms</code>，击败 <code>100%</code> 的 <code>C语言</code> 选手<br />\n空间 <code>5.3MB</code> , 击败 <code>17%</code> 的 <code>C语言</code> 选手</p>\n<h2 id=\"收获\"><a class=\"markdownIt-Anchor\" href=\"#收获\"></a> 收获</h2>\n<ul>\n<li><code>char**strs</code> 实际上是 <code>(char*)* strs</code> ，也就是说，一维数组 <code>strs</code> 是字符指针数组，它的每个元素都是一个字符指针——在本题中是一个字符串的首地址。</li>\n<li>提供字符串指针（不允许改动），要求获取字符串长度——可以复制一个指针副本，移动指针副本来遍历字符串，再加一个计数变量，即可获取串长。</li>\n<li>学会将问题分解成子问题，将子问题写成独立的函数，简化整体函数书写时的思维负担。</li>\n<li>一定要注意函数异常出口的书写</li>\n</ul>\n<h2 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h2>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> max_len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//记录扫描到目前为止所允许的最大前缀长度</span>\n<span class=\"token keyword\">int</span> asis_max_len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//辅助变量，记录每次比较两串时得到的公共前缀长度</span>\n\n<span class=\"token comment\">/*传入两个串的首地址，返回两串的最大公共前缀长度*/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetSamePrefix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> same_len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//异常出口，给空串则返回空串</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a <span class=\"token operator\">==</span> <span class=\"token char\">'\\0'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">==</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//a,b串都没到末尾，且扫描长度不可以超过之前记录的max_len</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span> <span class=\"token operator\">&amp;&amp;</span> same_len <span class=\"token operator\">&lt;=</span> max_len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            same_len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> same_len<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> same_len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//传入串地址，获取串长度，在主函数里用于初始化max_len</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">GetStrlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str_copy<span class=\"token punctuation\">;</span>\n    str_copy <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//避免对原指针造成改动</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str_copy <span class=\"token operator\">!=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        str_copy<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">longestCommonPrefix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> strs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> strsSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> asis<span class=\"token punctuation\">;</span>\n    asis <span class=\"token operator\">=</span> strs <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//辅助指针，与提供的指针并排前进（快一步）</span>\n    \n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> result<span class=\"token punctuation\">;</span>     <span class=\"token comment\">//后面用于存放前缀串地址，作返回值</span>\n\n    <span class=\"token comment\">//临界情况函数出口，给空串返回空串，只给一个串就返回该串</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strsSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strsSize <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>strs<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    max_len <span class=\"token operator\">=</span> <span class=\"token function\">GetStrlen</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化max_len为第一个串的长度，否则max_len一开始就是0，比较两串的子函数就无法执行</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> strsSize<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//用辅助变量记录每一次比较两串的得到的最大公共前缀长度</span>\n        asis_max_len <span class=\"token operator\">=</span> <span class=\"token function\">GetSamePrefix</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>strs<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>asis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//比较max_len与辅助变量，若更小则赋给max_len，因为max_len只能越来越小</span>\n        <span class=\"token comment\">//容易犯的错误是：没有使用辅助变量，max_len更新被覆盖，可能会变大</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max_len <span class=\"token operator\">>=</span> asis_max_len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            max_len <span class=\"token operator\">=</span> asis_max_len<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//若到了某个位置获取的max_len为零，说明出现了一个老鼠屎，毁了一锅字符串</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max_len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> strsSize<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//如果坚持到了最后两个串，就该出结果了</span>\n            <span class=\"token comment\">//题目说要返回最大前缀串的地址，这里没有开新的串，而是利用max_len截取最后一个串的前缀，拷贝到倒数第二个串（因为倒数第二个串长度肯定大于等于前缀，不会越界），再末尾加上结束符，相当于临时用倒数第二个串“接住”了前缀，再利用strncpy()来返回它的地址即可。</span>\n            result <span class=\"token operator\">=</span> <span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>strs<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>asis<span class=\"token punctuation\">,</span>max_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>strs<span class=\"token operator\">+</span>max_len<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//如果还有机会(max_len不为0)，又还没到最后，就继续移动</span>\n            asis<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            strs<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这个出口不可能达到，但是如果不写，测试会报错，随便写一个</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"其他解法\"><a class=\"markdownIt-Anchor\" href=\"#其他解法\"></a> 其他解法</h2>\n<h3 id=\"纵向扫描\"><a class=\"markdownIt-Anchor\" href=\"#纵向扫描\"></a> 纵向扫描</h3>\n<p>先看第一个字符，将所有串的第一个字符全部扫描一遍并比较，看是否完全相同，若完全相同则进入下一个字符，以此类推。时间复杂度和空间复杂度<strong>均与横向扫描相同</strong>。（引用Leetcode的图解）<br />\n<img src=\"/cjpark/img/longest_common_prefix/zxsm.png\" alt=\"\" /></p>\n<h3 id=\"分治递归\"><a class=\"markdownIt-Anchor\" href=\"#分治递归\"></a> 分治+递归</h3>\n<p>待补充</p>\n<h3 id=\"二分查找\"><a class=\"markdownIt-Anchor\" href=\"#二分查找\"></a> 二分查找</h3>\n<p>待补充</p>\n","text":" 题目 编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 &quot;&quot; 。 示例 1: 输入: [\"flower\",\"flow\",\"flight\"] 输出: \"fl\" 示例 2: 输入: [\"dog\",\"racecar\",\"car\"] ...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"题解","slug":"题解","count":16,"path":"api/tags/题解.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE\"><span class=\"toc-text\"> 题目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90\"><span class=\"toc-text\"> 分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\"> 整体思路框架</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E4%BC%98%E5%8C%96\"><span class=\"toc-text\"> 小优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD\"><span class=\"toc-text\"> 性能</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%94%B6%E8%8E%B7\"><span class=\"toc-text\"> 收获</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\"> 代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E8%A7%A3%E6%B3%95\"><span class=\"toc-text\"> 其他解法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%B5%E5%90%91%E6%89%AB%E6%8F%8F\"><span class=\"toc-text\"> 纵向扫描</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%B2%BB%E9%80%92%E5%BD%92\"><span class=\"toc-text\"> 分治+递归</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\"> 二分查找</span></a></li></ol></li></ol>","author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LC 344 反转字符串","uid":"781f960ea9b66678a41daf934b2a2a29","slug":"reverse_string","date":"2020-11-03T05:00:00.000Z","updated":"2020-12-08T10:29:30.000Z","comments":true,"path":"api/articles/reverse_string.json","keywords":null,"cover":"/img/leetcode.png","text":" 题目 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。 不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。 你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。 示例 1： ...","link":"","photos":[],"count_time":{"symbolsCount":686,"symbolsTime":"1 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"题解","slug":"题解","count":16,"path":"api/tags/题解.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"},{"name":"双指针","slug":"双指针","count":4,"path":"api/tags/双指针.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LC 434 字符串中的单词个数","uid":"b513457641c5d77aabc90d59ad7c2b99","slug":"num_of_segments_in_string","date":"2020-11-01T16:00:00.000Z","updated":"2020-12-08T10:29:16.000Z","comments":true,"path":"api/articles/num_of_segments_in_string.json","keywords":null,"cover":"/img/leetcode.png","text":" 题目 You are given a string s , return the number of segments in the string. A segment is defined to be a contiguous sequence of non-space ch...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"算法题解/笔记","slug":"算法题解-笔记","count":26,"path":"api/categories/算法题解-笔记.json"}],"tags":[{"name":"算法","slug":"算法","count":21,"path":"api/tags/算法.json"},{"name":"题解","slug":"题解","count":16,"path":"api/tags/题解.json"},{"name":"字符串","slug":"字符串","count":7,"path":"api/tags/字符串.json"}],"author":{"name":"菲尔普斯","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/72149771?v=4","link":"/","description":"你曾经灼热的眼眶，是人生中少数的笨拙又可贵的时刻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}